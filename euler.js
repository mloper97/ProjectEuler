/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/
function Euler1()
{
    //there are 333 multiples of 3 below 1000
    //so the multiples of 3 below 1000 are 3 * sum(1-333)
    //sum(1-n) = n(n+1)/2
    //similarly, there are 199 multiples of 5 below 1000
    //however, some of these overlap, as multiples of 15 - 
    return 3*333*334/2 + 5*199*200/2 - 15*66*67/2;
}

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
function Euler2()
{
    //whenever big numbers come into play you start thinking about integer precision
    //Number.MAX_SAFE_INTEGER is 2^53 - 1, or 9,007,199,254,740,991, or just over 9 quadrillion
    //sum(1-4,000,000) is 8,000,002,000,000‬ or just over 8 trillion, so integer precision will not be an issue
    result = 0;
    fibLower = 1;
    fibHigher = 1;
    fibNew = 0;
    while(fibNew < 4000000)
    {
        if(fibNew % 2 === 0)
        {
            result += fibNew;    
        }
        fibNew = fibLower + fibHigher;
        fibLower = fibHigher; 
        fibHigher = fibNew;
    }
    return result;
}

/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?

This requires getting the primes from the  first ~800,000 positive numbers so takes a little while to run.
*/
function Euler3()
{
    //MAX_SAFE_INTEGER check: 600,851,475,143 is roughly 4 orders of magnitude too small for that
    //Prime factors of N are primes between 1 and sqrt(N)
    //so let's find those primes
    let bigNumber = 600851475143;
    let upperBound = Math.floor(Math.sqrt(bigNumber));
    let primes = PrimesUpTo(upperBound);
    //iterate backwards through that array
    for(i = primes.length - 1; i > 0; i--)
    {
        if(bigNumber % primes[i] === 0)
        {
            return primes[i];
        }
    }
    //in the unlikely scenario that we get here, it's prime
    return bigNumber;
}
/*
Returns all primes from 2 to n. Used in Problem 3.
*/
function PrimesUpTo(n)
{
    //get all potential primes
    var allNumbers = Array.from(Array(n+1).keys());
    //remove 0 and 1    
    allNumbers.splice(0, 2);
    var result = [];
    while(allNumbers.length > 0)
    {
        //remove all numbers divisible by the first number in the array
        allNumbers = allNumbers.filter(IsDivisible);
        //add the first number in the array as a prime
        result.push(allNumbers[0]);
        //remove it from the array
        allNumbers.shift();
    }
    return result;
}
/*
Used by array.filter to remove all multiples of the first number in an array from that array.
Used in PrimesUpTo, which is used in Problem 3.
*/
function IsDivisible(element, index, allNumbers)
{
    if(index == 0)
    {
        return true;
    }
    else
    {
        return (element % allNumbers[0]);
    }
}
/*
Primality test that takes a number to be tested and a list of primes. Intended to be used in Problem 3, was way too slow and replaced with PrimesUpTo. 
Keeping it around because a single-number primality test could be useful.
*/
function IsPrimeArray(test, primes)
{
    for(i = 0; i < primes.length; i++)
    {
        if(test % primes[i] == 0)
        {
            return false;
        }
    }
    return true;
}
/*
Single-argument primality test; generates all useful primes using PrimesUpTo.

Returns true for 1, because there are no primes less than 1 and 1 is thus divisible by none of them.
*/
function IsPrime(test)
{
    let lowerPrimes = PrimesUpTo(Math.floor(Math.sqrt(test)));
    return IsPrimeArray(test, lowerPrimes);
}
/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/
function Euler4()
{
    result = 0;
    for(i = 100; i < 999; i++)
    {
        for(j = 100; j < 999; j++)
        {
            if(IsPalindrome(i * j))
            {
                if(i * j > result)
                {
                    result = i * j;
                }
            }
        }
    }
    return result;
}
/*
Tests string to see if it's a palindrome. Used in Problem 4.
*/
function IsPalindrome(n)
{
    str = n.toString();
    return(str.split("").reverse().join("") == str);
}
/*
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
function Euler5()
{
    //for each prime less than 20
    //get the highest power of that prime that's less than 20
    //multiply all those together
    let primes = PrimesUpTo(20);
    let powers = primes;
    let result = 1;
    for(i = 0; i < primes.length; i++)
    {
        while(powers[i] * primes[i] < 20)
        {
            powers[i] = powers[i] * primes[i];
        }
        result = result * powers[i];
    }
    return result;
}
/*
The sum of the squares of the first ten natural numbers is,
1^2+2^2+...+10^2=385

The square of the sum of the first ten natural numbers is,
(1+2+...+10)2=55^2=3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
function Euler6()
{
    //The sum of the first 100 natural numbers is 5050^2, because the sum of the first N natural numbers is N*(N+1)/2
    let squareOfSum = 5050 * 5050;
    /*
    * The sum of the squares is a little more complicated.
    * It's likely going to be a cubic equation since the sum of N is quadratic
    * To derive a cubic from four points (the first four points, (1, 1), (2, 5), (3, 14), and (4,30)) you can use Lagrange interpolation.
    * The algebra eventually comes out to (2n^3+3n^2+n)/6
    * And it works:
    * (2+3+1)/6 = 6/6 = 1
    * (2*8+3*4+2)/6 = (16+12+2)/6 = 30/6 = 5
    * (2*27+3*9+3)/6 = (54+27+3)/6 = 84/6 = 14
    * (2*64+3*16+4)/6 = (128+48+4)/6 = 180/6 = 30
    * (2*125+3*25+5)/6 = 330/6 = 55 = 30 + 5*5
    * So anyway, all that is explanation for:
    */
   let sumOfSquare = (2*1000000 + 3*10000 + 100)/6;
   return squareOfSum - sumOfSquare; 
}
/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10, 001st prime number?

This takes a couple seconds.
*/
function Euler7()
{
    let primes = PrimesUpTo(150000);
    return primes[10000];
}
/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
function Euler8()
{
    //Once again, it's time for a MAX_SAFE_INT check
    // 9^13 is 2,541,865,828,329
    // MAX_SAFE_INT is 9,007,199,254,740,991
    // we're once again too small
    var allThoseDigits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
    var max = 0;
    for(i = 0; i < allThoseDigits.length - 12; i++)
    {
        let test = 1;
        for(j = 0; j < 13; j++)
        {
            test = test * Number.parseInt(allThoseDigits.substr(i + j, 1));
        }
        if(test > max)
        {
            max = test;
        }
    }
    return max;
}

/*
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2

For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
*/
function Euler9()
{
    //you can generate Pythagorean triples/triplets with the following set of equations, for positive integers m > n:
    // a = m^2 - n^2
    // b = 2mn
    // c = m^2 + n^2
    // thus
    // m^2 - n^2 + 2mn + m^2 + n^2 = 1000
    // 2m^2 + 2mn = 1000
    // m^2 + mn = 500
    // m(m+n) = 500
    // so m^2 < 500
    // that gives us m <= 22
    // thinking about it 20(20+n) = 500 -> 400+20n = 500 -> 20n = 100 -> n = 5
    // so a = 400 - 25 = 375
    // b = 2*20*5 = 200
    // c = 400 + 25 = 425
    // 425 + 375 + 200 = 1000
    return 375*200*425;
}
/*
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

This takes about a minute.
*/
function Euler10()
{
    let primes = PrimesUpTo(2000000);
    return primes.reduce(function(a, b){ return a + b;}, 0);
}
/*
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 *26* 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 *63* 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 *78* 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 *14* 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
*/
function Euler11()
{
    let array = [
        [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
[49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
[81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
[52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
[22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
[24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
[32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
[67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
[24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
[21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
[78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
[16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
[86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
[19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
[4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
[88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
[4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
[20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
[20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
[1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
    ]
    //regular expressions help a great deal in converting the square of numbers provided into an array with the formatting needed
    var max = 0;
    for(i = 0; i < 16; i++)
    {
        for(j = 0; j < 20; j++)
        {
            let current = array[i][j] * array[i+1][j] * array[i+2][j] * array[i+3][j];
            if(current > max)
            {
                max = current;
            }
            current = array[j][i] * array[j][i+1] * array[j][i+2] * array[j][i+3];
            if(current > max)
            {
                max = current;
            }
            if(j < 16)
            {
                current = array[i][j] * array[i+1][j+1] * array[i+2][j+2] * array[i+3][j+3];
                if(current > max)
                {
                    max = current;
                }
                current = array[i][19-j] * array[i+1][18-j] * array[i+2][17-j] * array[i+3][16-j];
                if(current > max)
                {
                    max = current;
                }
            }
        }
    }
    return max;
}