/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/
function Euler1()
{
    //there are 333 multiples of 3 below 1000
    //so the multiples of 3 below 1000 are 3 * sum(1-333)
    //sum(1-n) = n(n+1)/2
    //similarly, there are 199 multiples of 5 below 1000
    //however, some of these overlap, as multiples of 15 - 
    return 3*333*334/2 + 5*199*200/2 - 15*66*67/2;
}

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
function Euler2()
{
    //whenever big numbers come into play you start thinking about integer precision
    //Number.MAX_SAFE_INTEGER is 2^53 - 1, or 9,007,199,254,740,991, or just over 9 quadrillion
    //sum(1-4,000,000) is 8,000,002,000,000‬ or just over 8 trillion, so integer precision will not be an issue
    result = 0;
    fibLower = 1;
    fibHigher = 1;
    fibNew = 0;
    while(fibNew < 4000000)
    {
        if(fibNew % 2 === 0)
        {
            result += fibNew;    
        }
        fibNew = fibLower + fibHigher;
        fibLower = fibHigher; 
        fibHigher = fibNew;
    }
    return result;
}

/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
*/
function Euler3()
{
    //MAX_SAFE_INTEGER check: 600,851,475,143 is roughly 4 orders of magnitude too small for that
    //Prime factors of N are primes between 1 and sqrt(N)
    //so let's find those primes
    let bigNumber = 600851475143;
    let upperBound = Math.floor(Math.sqrt(bigNumber));
    let primes = PrimesUpTo(upperBound);
    //iterate backwards through that array
    for(i = primes.length - 1; i > 0; i--)
    {
        if(bigNumber % primes[i] === 0)
        {
            return primes[i];
        }
    }
    //in the unlikely scenario that we get here, it's prime
    return bigNumber;
}
/*
Returns all primes from 2 to n. Used in Problem 3.
*/
function PrimesUpTo(n)
{
    //get all potential primes
    var allNumbers = Array.from(Array(n+1).keys());
    //remove 0 and 1    
    allNumbers.splice(0, 2);
    var result = [];
    while(allNumbers.length > 0)
    {
        //remove all numbers divisible by the first number in the array
        allNumbers = allNumbers.filter(IsDivisible);
        //add the first number in the array as a prime
        result.push(allNumbers[0]);
        //remove it from the array
        allNumbers.shift();
    }
    return result;
}
/*
Used by array.filter to remove all multiples of the first number in an array from that array.
Used in PrimesUpTo, which is used in Problem 3.
*/
function IsDivisible(element, index, allNumbers)
{
    if(index == 0)
    {
        return true;
    }
    else
    {
        return (element % allNumbers[0]);
    }
}
/*
Primality test that takes a number to be tested and a list of primes. Intended to be used in Problem 3, was way too slow and replaced with PrimesUpTo. 
Keeping it around because a single-number primality test could be useful.
*/
function IsPrimeArray(test, primes)
{
    for(i = 0; i < primes.length; i++)
    {
        if(test % primes[i] == 0)
        {
            return false;
        }
    }
    return true;
}
/*
Single-argument primality test; generates all useful primes using PrimesUpTo.

Returns true for 1, because there are no primes less than 1 and 1 is thus divisible by none of them.
*/
function IsPrime(test)
{
    let lowerPrimes = PrimesUpTo(Math.floor(Math.sqrt(test)));
    return IsPrimeArray(test, lowerPrimes);
}
/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
*/
function Euler4()
{
    result = 0;
    for(i = 100; i < 999; i++)
    {
        for(j = 100; j < 999; j++)
        {
            if(IsPalindrome(i * j))
            {
                if(i * j > result)
                {
                    result = i * j;
                }
            }
        }
    }
    return result;
}
/*
Tests string to see if it's a palindrome. Used in Problem 4.
*/
function IsPalindrome(n)
{
    str = n.toString();
    return(str.split("").reverse().join("") == str);
}
/*
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
function Euler5()
{
    //for each prime less than 20
    //get the highest power of that prime that's less than 20
    //multiply all those together
    let primes = PrimesUpTo(20);
    let powers = primes;
    let result = 1;
    for(i = 0; i < primes.length; i++)
    {
        while(powers[i] * primes[i] < 20)
        {
            powers[i] = powers[i] * primes[i];
        }
        result = result * powers[i];
    }
    return result;
}
/*
The sum of the squares of the first ten natural numbers is,
1^2+2^2+...+10^2=385

The square of the sum of the first ten natural numbers is,
(1+2+...+10)2=55^2=3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
function Euler6()
{
    //The sum of the first 100 natural numbers is 5050^2, because the sum of the first N natural numbers is N*(N+1)/2
    let squareOfSum = 5050 * 5050;
    /*
    * The sum of the squares is a little more complicated.
    * It's likely going to be a cubic equation since the sum of N is quadratic
    * To derive a cubic from four points (the first four points, (1, 1), (2, 5), (3, 14), and (4,30)) you can use Lagrange interpolation.
    * The algebra eventually comes out to (2n^3+3n^2+n)/6
    * And it works:
    * (2+3+1)/6 = 6/6 = 1
    * (2*8+3*4+2)/6 = (16+12+2)/6 = 30/6 = 5
    * (2*27+3*9+3)/6 = (54+27+3)/6 = 84/6 = 14
    * (2*64+3*16+4)/6 = (128+48+4)/6 = 180/6 = 30
    * (2*125+3*25+5)/6 = 330/6 = 55 = 30 + 5*5
    * So anyway, all that is explanation for:
    */
   let sumOfSquare = (2*1000000 + 3*10000 + 100)/6;
   return squareOfSum - sumOfSquare; 
}
/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
*/
function Euler7()
{
    let primes = PrimesUpTo(150000);
    return primes[10000];
}